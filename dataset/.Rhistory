xanchor = "center",
yanchor = "bottom",
showarrow = FALSE
),
list(
x = 0.8,
y = 1,
text = "Key vs. Time",
xref = "paper",
yref = "paper",
xanchor = "center",
yanchor = "bottom",
showarrow = FALSE
),
list(
x = 0.2,
y = 0.4,
text = "Valence vs. Time",
xref = "paper",
yref = "paper",
xanchor = "center",
yanchor = "bottom",
showarrow = FALSE
),
list(
x = 0.8,
y = 0.4,
text = "Length vs. Time",
xref = "paper",
yref = "paper",
xanchor = "center",
yanchor = "bottom",
showarrow = FALSE
))
fig <- fig %>%layout(annotations = annotations)
#options(warn = -1)
fig
summary(songs.df)
Pop <- filter(Spotify, Spotify$is_pop == TRUE)
boxplot(Spotify$tempo,Pop$bpm,
main = "Beats per minute",
xlab = "bpm",
names = c("bpm overall", "bpm Pop genre"),
col = c("orange", "red"),
border = "brown",
horizontal = TRUE,
notch = TRUE)
library(ggplot2)
Pop <- filter(Spotify, Spotify$is_pop == TRUE)
boxplot(Spotify$tempo,Pop$bpm,
main = "Beats per minute",
xlab = "bpm",
names = c("bpm overall", "bpm Pop genre"),
col = c("orange", "red"),
border = "brown",
horizontal = TRUE,
notch = TRUE)
Pop <- filter(Spotify, Spotify$is_pop == TRUE)
boxplot(Spotify$tempo,Pop$tempo,
main = "Beats per minute",
xlab = "bpm",
names = c("bpm overall", "bpm Pop genre"),
col = c("orange", "red"),
border = "brown",
horizontal = TRUE,
notch = TRUE)
Pop
Pop$tempo
Pop <- filter(Spotify, Spotify$is_pop = TRUE)
Spotify
Pop <- filter(Spotify, Spotify$is_pop == 'True')
Pop$tempo
boxplot(Spotify$tempo,Pop$tempo,
main = "Beats per minute",
xlab = "bpm",
names = c("bpm overall", "bpm Pop genre"),
col = c("orange", "red"),
border = "brown",
horizontal = TRUE,
notch = TRUE)
Pop
nrows(Pop)
nrow(Pop)
ggplot(Spotify,
aes(x=energy, y=popularity, color = popularity)) +
geom_point(size=5) +
ggtitle("Relations between song popularity and its energy")
fig1 <- plot_ly(data = Spotify,x = ~popularity, y = ~mode,
type = 'scatter', mode = 'markers',
name="Mode",marker=list(size = 3,
color = ~mode)) %>%
layout(xaxis = list(title = 'Popularity',range = c(10,100)), yaxis = list(title = 'Mode'))
fig2 <- plot_ly(data = Spotify,x = ~popularity, y = ~liveness, type = 'scatter', mode = 'markers',
name="Liveness",marker=list(size = 3,
color = ~liveness)) %>%
layout(xaxis = list(title = 'Popularity',range = c(10,100)), yaxis = list(title = 'Liveness'))
fig3 <- plot_ly(data = Spotify,x = ~popularity, y = ~valence, type = 'scatter', mode = 'markers',
name="Valence",marker=list(size = 3,
color = ~valence)) %>%
layout(xaxis = list(title = 'Popularity',range = c(10,100)), yaxis = list(title = 'Valence'))
fig4 <- plot_ly(data = Spotify,x = ~popularity, y = ~duration_ms, type = 'scatter', mode = 'markers',
name="Length(Duration)",marker=list(size = 3,
color = ~duration_ms)) %>%
layout(xaxis = list(title = 'Popularity',range = c(10,100)), yaxis = list(title = 'Length'))
fig <- subplot(fig1, fig2, fig3, fig4, nrows = 2, titleY = TRUE, titleX = TRUE, margin = 0.1)%>%
layout(
#title = 'Characteristics vs. Popularity',
plot_bgcolor='#e5ecf6',
xaxis = list(
zerolinecolor = '#ffff',
zerolinewidth = 2,
gridcolor = 'ffff'),
yaxis = list(
zerolinecolor = '#ffff',
zerolinewidth = 2,
gridcolor = 'ffff'))
annotations = list(
list(
x = 0.2,
y = 1.0,
text = "Mode vs. Popularity",
xref = "paper",
yref = "paper",
xanchor = "center",
yanchor = "bottom",
showarrow = FALSE
),
list(
x = 0.8,
y = 1,
text = "Liveness vs. Popularity",
xref = "paper",
yref = "paper",
xanchor = "center",
yanchor = "bottom",
showarrow = FALSE
),
list(
x = 0.2,
y = 0.4,
text = "Valence vs. Popularity",
xref = "paper",
yref = "paper",
xanchor = "center",
yanchor = "bottom",
showarrow = FALSE
),
list(
x = 0.8,
y = 0.4,
text = "Length vs. Popularity",
xref = "paper",
yref = "paper",
xanchor = "center",
yanchor = "bottom",
showarrow = FALSE
))
fig <- fig %>%layout(annotations = annotations)
#options(warn = -1)
fig
fig1 <- plot_ly(data = Spotify,x = ~year, y = ~acousticness,
type = 'scatter', mode = 'lines',
name="Acousticness") %>%
layout(xaxis = list(title = 'Year'), yaxis = list(title = 'Acousticness'))
fig1
year_average.df[year_average.df$year > 1999,]
year_average.df[year_average.df$year <= 1999,]
year_average.df[year_average.df$year < 2000,]
#Number of songs in the year 1998,1999 and 2020
nrow(year_average.df[year_average.df$year < 2000,])
#Number of songs in the year 1998,1999 and 2020
nrow(year_average.df[year_average.df$year > 2000,])
#Number of songs in the year 1998,1999 and 2020
nrow(year_average.df[year_average.df$year > 1999,])
nrow(year_average.df[year_average.df$year == 1999,])
#Number of songs in the year 1998,1999 and 2020
nrow(year_average.df[year_average.df$year = 1999,])
#Number of songs in the year 1998,1999 and 2020
nrow(year_average.df[year_average.df$year == 1998,])
songs.df <- read.csv("songs_updated_v3.csv")
summary(songs.df)
#Cloning Dataset to avoid tampering
Spotify <- songs.df
nrow(Spotify[Spotify$year == 1998,])
#Number of songs in the year 1998,1999 and 2020
nrow(Spotify[Spotify$year == 1999,])
nrow(Spotify[Spotify$year < 2000,])
nrow(Spotify[Spotify$year == 2020,])
#Number of songs in the year 1998,1999 and 2020
nrow(Spotify[Spotify$year < 2000,]) +nrow(Spotify[Spotify$year == 2020,])
library(caret)
library(pROC)
library(forecast)
# Load the dataset
songs.df <- read.csv('dataset/songs_updated_v4.csv', stringsAsFactors = TRUE)
# Load the dataset
songs.df <- read.csv('songs_updated_v4.csv', stringsAsFactors = TRUE)
str(songs.df)
library(caret)
library(pROC)
library(forecast)
# Mode is 0 for Minor, 1 for Major
songs.df$mode <- factor(songs.df$mode)
levels(songs.df$mode)
levels(songs.df$mode) <- c('Minor', 'Major')
# Key is E.g. 0 = C, 1 = C♯/D♭, 2 = D, and so on. If no key was detected, the value is -1.
# C, C#, D, D#, E, F, F#, G, G#, A, A#, B
songs.df$key <- factor(songs.df$key)
levels(songs.df$key)
levels(songs.df$key) <- c('C', 'C#', 'D', 'D#', 'E', 'F', 'F#', 'G', 'G#', 'A', 'A#', 'B')
# Let's make years a factor
songs.df$year <- factor(songs.df$year)
# Popularity is an integer, let's make it numeric
# songs.df$popularity <- factor(songs.df$popularity/10 * 10)
songs.df$popularity <- as.numeric(songs.df$popularity)
# Just like popularity, let's make duration_ms as.numeric
songs.df$duration_ms <- as.numeric(songs.df$duration_ms)
str(songs.df)
# Drop the genre, songs, and artists columns
songs.df <- songs.df[, -which(names(songs.df) == 'genre')]
songs.df <- songs.df[, -which(names(songs.df) == 'artist')]
songs.df <- songs.df[, -which(names(songs.df) == 'song')]
set.seed(121)
train.index <- sample(seq_len(nrow(songs.df)), 0.6*nrow(songs.df))
train.df <- songs.df[train.index, ]
valid.df <- songs.df[-train.index, ]
songs.lm <- lm(popularity ~ ., data = train.df)
cat('Showing linear regression model summary:\n')
options(scipen = 999)
summary(songs.lm)
songs.lm.pred <- predict(songs.lm, valid.df)
cat('Time to test accuracy on the validation set\n')
accuracy(songs.lm.pred, valid.df$popularity)
p <- Spotify %>%
ggplot( aes(x=popularity, fill=explicit)) +
geom_histogram()
library(ggplot2)
p <- Spotify %>%
ggplot( aes(x=popularity, fill=explicit)) +
geom_histogram()
p
nrow(Spotify[Spotify$popularity < 10,])
Spotify[Spotify$popularity < 10,] %>% group_by(year)
library(magrittr) # needs to be run every time you start R and want to use %>%
library(dplyr)
Spotify[Spotify$popularity < 10,] %>% group_by(year) %>% summarise(across(year, list(sum = sum)))
summary(songs.df)
colnames(songs.df)
songs.df <- read.csv("songs_updated_v3.csv", stringsAsFactors = TRUE)
summary(songs.df)
colnames(songs.df)
#Cloning Dataset to avoid tampering
Spotify <- songs.df
Spotify[Spotify$popularity < 10,] %>% group_by(year) %>% summarise(sum(song))
install.packages("purrr")
install.packages("purrr")
install.packages("purrr")
library(purrr)
Spotify[Spotify$popularity < 10,] %>% split(Spotify[Spotify$popularity < 10,]$year) %>% map(summary)
Spotify[Spotify$popularity < 10,] %>% split(Spotify[Spotify$popularity < 10,]$year)
Spotify[Spotify$popularity < 10,] %>% group_by(year)
library(dplyr)
Spotify[Spotify$popularity < 10,] %>% group_by(year)
Pop10 <- Spotify[Spotify$popularity < 10,] %>% group_by(year)
Pop10[,year]
Pop10 <- Spotify[Spotify$popularity < 10,] %>% group_by(year)
Pop10[order(Pop10$year),]
Pop10$year
order(Pop10$year)
Pop10  %>% arrange(year)
Pop10$year
songs.df <- read.csv("songs_updated_v4.csv")
summary(songs.df)
#install.packages("magrittr") # package installations are only needed the first time you use it
#install.packages("dplyr")    # alternative installation of the %>%
library(magrittr) # needs to be run every time you start R and want to use %>%
library(dplyr)
library(ggplot2)
library(plotly)
Spotify <- songs.df
#remove Popularity whose score is less than 10. they are more like outliers
Pop.df <- Spotify[Spotify$popularity > 10,]
ggplot( Pop.df,aes(x=popularity)) +
geom_histogram( binwidth=3, fill="#69b3a2", color="#e9ecef", alpha=0.9) +
ggtitle("Popularity Histogram") + xlab("Popularity Ratings") + ylab ("Frequency")
p <- Spotify %>%
ggplot( aes(x=popularity, fill=explicit)) +
geom_histogram()
p
#8. Popularity vs Energy
ggplot(Spotify,
aes(x=energy, y=popularity, color = popularity)) +
geom_point(size=5) +
ggtitle("Relations between song popularity and its energy")
Pop <- filter(Spotify, Spotify$is_pop == 'True')
# nrow(Pop)
boxplot(Spotify$tempo,Pop$tempo,
main = "Beats per minute",
xlab = "bpm",
names = c("bpm overall", "bpm Pop genre"),
col = c("orange", "red"),
border = "brown",
horizontal = TRUE,
notch = TRUE)
nrow(Spotify[Spotify$year < 2000,]) +nrow(Spotify[Spotify$year == 2020,])
ggplot(Spotify,
aes(x=is_pop, y=popularity, color = popularity)) +
geom_point(size=5) +
ggtitle("Relations between popularity and Is_pop")
ggplot(Spotify,
aes(x=is_pop, y=popularity, color = popularity)) +
geom_histogram()
ggplot(Spotify,
aes(x=popularity, fill=is_pop)) +
geom_histogram()
ggtitle("Relations between popularity and Is_pop")
#10 is Pop genre belong to popular
po <- Spotify %>%
ggplot(aes(x=popularity, fill=is_pop)) +
geom_histogram()
po
po <- Spotify %>%
ggplot(aes(x=popularity, fill=is_pop)) +
geom_boxplot()
po
po <- Spotify %>%
ggplot(aes(x=popularity, y=is_pop)) +
geom_point()
po
#10 is Pop genre belong to popular
po <- Spotify %>%
ggplot(aes(x=popularity, fill=is_pop)) +
geom_boxplot()
po
# Load the dataset
songs.df <- read.csv('songs_updated_v4.csv', stringsAsFactors = TRUE)
str(songs.df)
library(caret)
library(pROC)
library(forecast)
# Load the dataset
songs.df <- read.csv('dataset/songs_updated_v4.csv', stringsAsFactors = TRUE)
# Load the dataset
songs.df <- read.csv('songs_updated_v4.csv', stringsAsFactors = TRUE)
str(songs.df)
# Mode is 0 for Minor, 1 for Major
songs.df$mode <- factor(songs.df$mode)
levels(songs.df$mode)
levels(songs.df$mode) <- c('Minor', 'Major')
# Key is E.g. 0 = C, 1 = C♯/D♭, 2 = D, and so on. If no key was detected, the value is -1.
# C, C#, D, D#, E, F, F#, G, G#, A, A#, B
songs.df$key <- factor(songs.df$key)
levels(songs.df$key)
levels(songs.df$key) <- c('C', 'C#', 'D', 'D#', 'E', 'F', 'F#', 'G', 'G#', 'A', 'A#', 'B')
# Let's make years a factor
songs.df$year <- factor(songs.df$year)
# Popularity is an integer, let's make it numeric
# songs.df$popularity <- factor(songs.df$popularity/10 * 10)
songs.df$popularity <- as.numeric(songs.df$popularity)
# Just like popularity, let's make duration_ms as.numeric
songs.df$duration_ms <- as.numeric(songs.df$duration_ms)
str(songs.df)
# Drop the genre, songs, and artists columns
songs.df <- songs.df[, -which(names(songs.df) == 'genre')]
# songs.df <- songs.df[, -which(names(songs.df) == 'artist')]
songs.df <- songs.df[, -which(names(songs.df) == 'song')]
str(songs.df)
# Now let's partition the dataset
# Have to be careful with seed as some seeds will result in
# one of the factors ending up with only one unique value
# which breaks the logistic regression model
set.seed(121)
train.index <- sample(seq_len(nrow(songs.df)), 0.6*nrow(songs.df))
train.df <- songs.df[train.index, ]
valid.df <- songs.df[-train.index, ]
str(train.df)
# Now let's store output to file
sink(file = "data_modeling/linear_reg_output_artist.txt")
# Pre-process the dataset
# Mode is 0 for Minor, 1 for Major
songs.df$mode <- factor(songs.df$mode)
levels(songs.df$mode)
levels(songs.df$mode) <- c('Minor', 'Major')
# Key is E.g. 0 = C, 1 = C♯/D♭, 2 = D, and so on. If no key was detected, the value is -1.
# C, C#, D, D#, E, F, F#, G, G#, A, A#, B
songs.df$key <- factor(songs.df$key)
levels(songs.df$key)
levels(songs.df$key) <- c('C', 'C#', 'D', 'D#', 'E', 'F', 'F#', 'G', 'G#', 'A', 'A#', 'B')
# Let's make years a factor
songs.df$year <- factor(songs.df$year)
# Popularity is an integer, let's make it numeric
# songs.df$popularity <- factor(songs.df$popularity/10 * 10)
songs.df$popularity <- as.numeric(songs.df$popularity)
# Just like popularity, let's make duration_ms as.numeric
songs.df$duration_ms <- as.numeric(songs.df$duration_ms)
str(songs.df)
# Drop the genre, songs, and artists columns
songs.df <- songs.df[, -which(names(songs.df) == 'genre')]
# songs.df <- songs.df[, -which(names(songs.df) == 'artist')]
songs.df <- songs.df[, -which(names(songs.df) == 'song')]
str(songs.df)
set.seed(121)
train.index <- sample(seq_len(nrow(songs.df)), 0.6*nrow(songs.df))
train.df <- songs.df[train.index, ]
valid.df <- songs.df[-train.index, ]
str(train.df)
songs.lm <- lm(popularity ~ ., data = train.df)
summary(songs.lm)
songs.lm <- lm(popularity ~ ., data = train.df)
library(caret)
library(pROC)
# Load the dataset
songs.df <- read.csv('dataset/songs_updated_v4.csv', stringsAsFactors = TRUE)
library(caret)
library(pROC)
# Load the dataset
songs.df <- read.csv('songs_updated_v4.csv', stringsAsFactors = TRUE)
str(songs.df)
songs.df <- read.csv("songs_updated_v3.csv", stringsAsFactors = TRUE)
summary(songs.df)
colnames(songs.df)
#Cloning Dataset to avoid tampering
Spotify <- songs.df
library(caret)
library(pROC)
# Load the dataset
songs.df <- read.csv('songs_updated_v4.csv', stringsAsFactors = TRUE)
str(songs.df)
# Mode is 0 for Minor, 1 for Major
songs.df$mode <- factor(songs.df$mode)
levels(songs.df$mode)
levels(songs.df$mode) <- c('Minor', 'Major')
# Key is E.g. 0 = C, 1 = C♯/D♭, 2 = D, and so on. If no key was detected, the value is -1.
# C, C#, D, D#, E, F, F#, G, G#, A, A#, B
songs.df$key <- factor(songs.df$key)
levels(songs.df$key)
levels(songs.df$key) <- c('C', 'C#', 'D', 'D#', 'E', 'F', 'F#', 'G', 'G#', 'A', 'A#', 'B')
songs.df$year <- factor(songs.df$year)
# Popularity is an integer, let's make it numeric
# songs.df$popularity <- factor(songs.df$popularity/10 * 10)
songs.df$popularity <- as.numeric(songs.df$popularity)
# Just like popularity, let's make duration_ms as.numeric
songs.df$duration_ms <- as.numeric(songs.df$duration_ms)
songs.df <- songs.df[, -which(names(songs.df) == 'genre')]
str(songs.df)
summary(songs.df$popularity)
songs.df$popularity <- ifelse(songs.df$popularity < 50, 0, 1)
set.seed(121)
artist.col = which(names(songs.df) == 'artist')
song.col = which(names(songs.df) == 'song')
select.index <- c(-1, -2)
selected.df <- songs.df[, select.index]
train.index <- sample(1:nrow(selected.df), 0.6*nrow(selected.df))
train.df <- selected.df[train.index, ]
valid.df <- selected.df[-train.index, ]
logit.reg <- glm(popularity ~ ., data = train.df, family = "binomial")
summary(logit.reg)
# Generate outcome
logit.reg.pred <- predict(logit.reg, valid.df, type = "response")
pred
logit.reg.pred
pred <- ifelse(logit.reg.pred > 0.5, 1, 0)
# Lets see confusion matrix with these values
cat('Confusion Matrix with cutoff value of 0.5')
confusionMatrix(factor(pred), factor(valid.df$popularity), positive = "1")
library(magrittr) # needs to be run every time you start R and want to use %>%
library(dplyr)
library(plotly)
songs.df <- read.csv("songs_updated_v3.csv", stringsAsFactors = TRUE)
Spotify <- songs.df
year_average.df=Spotify[selected.var]
year_average.df
year_average <- year_average.df %>% group_by(year) %>%
summarise(Total_Popularity=sum(popularity))
year_average
print(year_average)
print(20=year_average)
View(year_average)
library(ggplot2)
p <- year_average %>%
ggplot( aes(x=year, fill=Total_Popularity)) +
geom_histogram()
p
p <- year_average %>%
ggplot( aes(x=Total_Popularity, fill=year)) +
geom_histogram()
p
p <- year_average %>%
ggplot( aes(x=year, fill=Total_Popularity)) +
geom_bar()
p
ggplot(year_average, aes(fill=Total_Popularity, y=Total_Popularity, x=year)) +
geom_bar(position="dodge", stat="identity")
rand(n = 1, m = 9)
RandomNum <- runif(9, 1, 9)
RandomNum
set.seed(1) # random number will generate from 12
TenRandomNumbers <- sort(sample.int(9, 1))
TenRandomNumbers
set.seed(1) # random number will generate from 12
TenRandomNumbers <- sort(sample.int(9, 1))
TenRandomNumbers
set.seed(1) # random number will generate from 12
TenRandomNumbers <- sort(sample.int(9, 1))
TenRandomNumbers
set.seed(0) # random number will generate from 12
TenRandomNumbers <- sort(sample.int(9, 1))
TenRandomNumbers
# Get 5 random Numbers from 5 to 99
runif(9, min=1, max=9)
# Get 5 random Numbers from 5 to 99
floor(runif(9, min=1, max=9))
